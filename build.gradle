/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    // Gradle JPI plugin
    id 'org.jenkins-ci.jpi' version '0.43.0'

    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.jenkins-ci.org/public/')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation 'org.jenkins-ci.plugins:structs:1.22'
    testImplementation 'org.jenkins-ci.main:jenkins-war:2.204'
    testImplementation 'org.jenkins-ci.main:jenkins-test-harness:2.71'
    testImplementation 'org.jenkins-ci:test-annotations:1.3'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-cps:2.89'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-job:2.40'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-basic-steps:2.23'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-durable-task-step:2.37'
    testImplementation 'org.jenkins-ci.main:jenkins-war:2.277.1'
    compileOnly 'org.jenkins-ci.main:jenkins-core:2.204'
    compileOnly 'javax.servlet:javax.servlet-api:3.1.0'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.11'
    compileOnly 'net.jcip:jcip-annotations:1.0'
    compileOnly 'org.codehaus.mojo:animal-sniffer-annotations:1.19'
    compileOnly 'commons-logging:commons-logging:1.2'
    compileOnly 'org.kohsuke:access-modifier-annotation:1.14'
    compileOnly 'org.jenkins-ci.main:jenkins-core:2.277.1'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.2.0'
    compileOnly 'org.kohsuke:access-modifier-annotation:1.16'
}

java.sourceCompatibility = JavaVersion.VERSION_1_8
java.targetCompatibility = JavaVersion.VERSION_1_8
description = 'Sample Gradle configuration for releasing a Jenkins Plugin to ToolSpring.'

configurations.all {
    exclude(group: 'javax.servlet', module: 'servlet-api')
    exclude(group: 'org.sonatype.sisu', module: 'sisu-guice')
    exclude(group: 'log4j', module: 'log4j')
    exclude(group: 'commons-logging', module: 'commons-logging')
    exclude(group: 'org.testng', module: 'testng')
}

jenkinsPlugin {
    // version of Jenkins core this plugin depends on, must be 1.420 or later
    jenkinsVersion = '2.277.1'

    // ID of the plugin, defaults to the project name without trailing '-plugin'
    shortName = 'sample-jenkins-plugin-gradle'

    // human-readable name of plugin
    displayName = 'Sample Jenkins Plugin Gradle'

    // URL for plugin on Jenkins wiki or elsewhere
    url = 'http://wiki.toolspring.com/plugins/sample-jenkins-plugin-gradle'

    // plugin URL on GitHub, optional
    gitHubUrl = 'https://github.com/ToolSpring/sample-jenkins-plugin-gradle'

    // use the plugin class loader before the core class loader, defaults to false
    pluginFirstClassLoader = true

    // optional list of package prefixes that your plugin doesn't want to see from core
    // maskClasses = 'groovy.grape org.apache.commons.codec'

    // optional version number from which this plugin release is configuration-compatible
    // compatibleSinceVersion = '1.1.0'

    // set the directory from which the development server will run, defaults to 'work'
    // workDir = file('/tmp/jenkins')

    // URL used to deploy the plugin, defaults to the value shown
    // the system property 'jpi.repoUrl' can be used to override this option
    // repoUrl = 'https://repo.jenkins-ci.org/releases'

    // URL used to deploy snapshots of the plugin, defaults to the value shown
    // the system property 'jpi.snapshotRepoUrl' can be used to override this option
    // snapshotRepoUrl = 'https://repo.jenkins-ci.org/snapshots'

    // enable injection of additional tests for checking the syntax of Jelly and other things
    disabledTestInjection = false

    // the output directory for the localizer task relative to the project root, defaults to the value shown
    localizerOutputDir = "${project.buildDir}/generated-src/localizer"

    // disable configuration of Maven Central, the local Maven cache and the Jenkins Maven repository, defaults to true
    configureRepositories = false

    // skip configuration of publications and repositories for the Maven Publishing plugin, defaults to true
    configurePublishing = false

    // plugin file extension, either 'jpi' or 'hpi', defaults to 'hpi'
    fileExtension = 'hpi'

    // the developers section is optional, and corresponds to the POM developers section
    developers {
        developer {
            id 'aprozorov'
            name 'Andrei Prozorov'
            email 'info@andreiprozorov.com'
        }
    }

    // the licenses section is optional, and corresponds to the POM licenses section
    licenses {
        license {
            // Maven:
            name ''
            url ''
            distribution 'repo'
            comments ''
        }
    }
}


publishing {
    publications {
        maven(MavenPublication) {
            version = '0.1'

            groupId = 'com.andreiprozorov.plugins'

            // Override artifactId because the default will be based on the dir structure, for example:
            //
            //     com.andreiprozorov.plugins.lib.0.1
            //
            // whereas we want this:
            //
            //     com.andreiprozorov.plugins.echo-static-analysis.0.1
            artifactId = jenkinsPlugin.shortName

            from components.java
        }
    }

    repositories {
        maven {
            name project.toolspringMavenName
            url project.toolspringMavenUrl

            authentication {
                basic(BasicAuthentication)
            }

            credentials {
                username project.toolspringUsername
                password project.toolspringPassword
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
